#!/bin/bash

#----------------------------------------------------------------------------------
# Project Name      - insit (Based on the older, Installit)
# Started On        - Wed 13 Dec 01:13:55 GMT 2017
# Last Change       - Sat  3 Mar 06:06:51 GMT 2018
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------

#TODO - Incorporate an 'undo' update action, in-case an update breaks something.

XERR(){ printf "[L%0.4d] ERROR: %s\n" "$1" "$2" 1>&2; exit 1; }
ERR(){ printf "[L%0.4d] ERROR: %s\n" "$1" "$2" 1>&2; }

declare -i DEPCOUNT=0
for DEP in /usr/bin/wget /bin/{mv,rm,chmod,chown,mkdir}; {
	[ -x "$DEP" ] || {
		ERR "$LINENO" "Dependency '$DEP' not met."
		DEPCOUNT+=1
	}
}

[ $DEPCOUNT -eq 0 ] || exit 1

# Newer versions of wget by default request unwanted server-side compression.
read -a WGET_VER_LINE <<< "$(/usr/bin/wget --version)"
[ 0${WGET_VER_LINE[2]//[!0-9]} -ge 01192 ] && NOWARC="--no-warc-compression"

USAGE(){
	while read -r; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            INSIT (2nd March 2018)
		            Written by terminalforlife (terminalforlife@yahoo.com)

		            Installer for many shell programs from terminalforlife.

		SYNTAX:     insit [OPTS] WHAT1 WHAT2 WHAT3 . . .

		OPTS:       --help|-h|-?            - Displays this help information.
		            --verbose|-v            - Also display the log output.
		            --debug                 - Enables the built-in bash debugging.
		            --quiet|-q              - Runs in quiet mode. Errors still output.
		            --update|-U             - Replace and update existing files.
		            --uninstall|-u          - Uninstall files installed here.
		            --available|-A          - Output all available programs.
		            --branch|-B NAME        - Where NAME is the branch to use.
		            --self-update|-S        - Update insit to the latest stable version.
		            --ignore-root|-I        - Disregard whether you have root access.
		            --custom|-C             - Execute your own FILE function line.
		            --log|-L                - Log and time-stamp actions to take.

		NOTE:       Where WHAT is the program(s) to install.

		            The argument positions for the FILE function:

		              1: Name of the repository, per the URL.
		              2: Name of the file, per the URL, to download.
		              3: Desired name of the file to be Downloaded.
		              4: The permissions (mode), such as 755 or 644.
		              5: The file's owner and group, such as 0 or \$USER.

		EXAMPLE:    sudo insit -B dev -U -C miscellaneous mfw /usr/bin/mfw 755 0
		            sudo insit -U notify-upgrade lspkg lsbins apt-undo-install
		            sudo insit -q --log --uninstall bl medlog wcdl clean-locales

		WARNING:    Using the --update|-U flags will overwrite existing files, so, if an
		            executable just so happens to have the same name, take care not to
		            replace it by mistake!

		            All programs, scripts, and other files from the below SITE will contain
		            the comment header you see within this file, so grepping for the E-Mail
		            address or GitHub URL below would be a good way to check.

		FILE:       The log file is stored in: /var/log/tfl_insit.log

		SITE:       https://github.com/terminalforlife
	EOF
}

OSFILE="/etc/os-release"
LOGFILE="/var/log/tfl_insit.log"
URL="github.com/terminalforlife"
BRANCH="master"

while [ "$1" ]; do
	case "$1" in
		--help|-h|-\?)
			USAGE; exit 0 ;;
		--verbose|-v)
			if [ -x /usr/bin/tee ]; then
				VERBOSE="true"
			else
				XERR "$LINENO" "Dependency '/usr/bin/tee' not met."
			fi ;;
		--debug)
			DEBUGME="true" ;;
		--quiet|-q)
			BEQUIET="true" ;;
		--update|-U)
			UPDATE="true" ;;
		--uninstall|-u)
			UNINSTALL="true" ;;
		--available|-A)
			AVAIL_SHOW="true" ;;
		--branch|-B)
			shift
			BRANCH="$1" ;;
		--self-update|-S)
			UPDATE="true"
			SELF="true" ;;
		--ignore-root|-I)
			IGNORE_ROOT="true" ;;
		--custom|-C)
			CUSTOM="true" ;;
		--log|-L)
			LOGIT="true" ;;
		-*)
			XERR "$LINENO" "Incorrect argument(s) specified." ;;
		*)
			break ;;
	esac

	shift
done

if ! [ "$AVAIL_SHOW" == "true" -o "$IGNORE_ROOT" == "true" ]; then
	if ! [ $UID -eq 0 ]; then
		XERR "$LINENO" "Unable to continue -- do you have root access?"
	fi
elif [ ! "$NOLOG" == "true" -a ! -x /usr/bin/tee ]; then
	XERR "$LINENO" "Dependency '/usr/bin/tee' not met."
fi

[ "$BEQUIET" == "true" ] && exec 1> /dev/null
[ "$DEBUGME" == "true" ] && set -xeu

LOGIT(){
	if ! [ $UID -eq 0 ]; then
		ERR "$LINENO" "Logging disabled -- insufficient permissions."
		return 1
	fi

	if [ "$LOGIT" == "true" ]; then
		if ! [ -d "${LOGFILE%/*}" ]; then
			XERR "$LINENO" "System directory '/var/log' not found."
		else
			printf -v DATETIME "%(%F_%X)T" "-1"
			if [ "$VERBOSE" == "true" ]; then
				printf "[%s]: %s\n" "$DATETIME" "$1"\
					| /usr/bin/tee -a "$LOGFILE"
			else
				printf "[%s]: %s\n" "$DATETIME" "$1" >> "$LOGFILE"
			fi

			readarray A < "$LOGFILE"
			if [ "${#A[@]}" -gt 4000 ]; then
				/bin/mv "$LOGFILE"{,.old}
				[ -x /bin/gzip ] && /bin/gzip "${LOGFILE}.old"
			fi
		fi
	fi
}

FILE(){
	# FILE project_name "source_file.sh" "/usr/bin/target_file" 755
	if [ "$UNINSTALL" == "true" ]; then
		if ! [ -x /usr/bin/gvfs-trash ]; then
			local MSG="This will delete installed files"
			read -e -n 1 -p "$MSG -- continue? "
			if [[ "$REPLY" == [yY] ]]; then
				LOGIT "Deleting $3"
				if /bin/rm "$3"; then
					LOGIT "Deleted $3"
					printf "File '%s' deleted.\n" "$3"
				else
					LOGIT "Failed to delete $3"
					ERR "Unable to delete: $3"
				fi
			else
				LOGIT "Quit at uninstallation prompt"
				printf "No action taken -- quitting.\n"
			fi
		else
			local MSG="This will send installed files to the trash"
			read -e -n 1 -p "$MSG -- continue? "
			if [[ "$REPLY" == [yY] ]]; then
				LOGIT "Trashing $3"
				if /usr/bin/gvfs-trash "$3"; then
					LOGIT "Trashed $3"
					printf "File '%s' sent to trash.\n" "$3"
				else
					LOGIT "Failed to trash $3"
					ERR "Unable to trash: $3"
				fi
			else
				LOGIT "Quit at uninstallation prompt"
				printf "No action taken -- quitting.\n"
			fi
		fi
	else
		#TODO - The below line needs to test for whether update or self are
		#       NOT true, as well as if the file $3 already exists. This is
		#       to ensure proper self update and regular program updates.
		if [ -f "$3" -a ! "$UPDATE" == "true" ]; then
			LOGIT "File $3 already exists"
			ERR "$LINENO" "File already exists: $3"
			return 1
		else
			#TODO - This is sloppy - IMPROVE!
			if [ -f "$3" ]; then
				LOGIT "Downloading $URL/$1/$BRANCH/$2 over $3"
				if /usr/bin/wget -q $NOWARC "$URL/$1/raw/$BRANCH/$2" -O "$3" &> /dev/null; then
					LOGIT "Downloaded $URL/$1/$BRANCH/$2 over $3"
					printf "File '%s' downloaded and updated.\n" "$3"
				else
					LOGIT "Failed to download $URL/$1/$BRANCH/$2 over $3"
					ERR "$LINENO" "Unable to download and/or update '$3' file."
					return 1
				fi

				LOGIT "Re-setting $3 to $5 UID and $6 GID"
				if /bin/chown $5:$6 "$3" &> /dev/null; then
					LOGIT "Re-set $3 to $5 UID and $6 GID"
					printf "File '%s' ownership re-set.\n" "$3"
				else
					LOGIT "Failed to re-set $3 to $5 UID and $6 GID"
					ERR "$LINENO" "Unable to re-set the ownership of '$3' file."
				fi

				LOGIT "Re-setting $3 to $4 permissions"
				if /bin/chmod "$4" "$3" &> /dev/null; then
					LOGIT "Re-set $3 to $4 permissions"
					printf "File '%s' mode re-set.\n" "$3"
				else
					LOGIT "Failed to re-set $3 to $4 permissions"
					ERR "$LINENO" "Unable to re-set the mode of '$3' file."
				fi
			else
				LOGIT "Downloading $URL/$1/$BRANCH/$2 to $3"
				if /usr/bin/wget -q $NOWARC "$URL/$1/raw/$BRANCH/$2" -O "$3" &> /dev/null; then
					LOGIT "Downloaded $URL/$1/$BRANCH/$2 to $3"
					printf "File '%s' downloaded.\n" "$3"
				else
					LOGIT "Failed to download $URL/$1/$BRANCH/$2 to $3"
					ERR "$LINENO" "Unable to download '$3' file."
					return 1
				fi

				LOGIT "Setting $3 to $6 UID and $5 GID"
				if /bin/chown $5:$6 "$3" &> /dev/null; then
					LOGIT "Set $3 to $6 UID and $5 GID"
					printf "File '%s' ownership set.\n" "$3"
				else
					LOGIT "Failed to set $3 to $6 UID and $5 GID"
					ERR "$LINENO" "Unable to set the ownership of '$3' file."
				fi

				LOGIT "Setting $3 to $4 permissions"
				if /bin/chmod "$4" "$3" &> /dev/null; then
					LOGIT "Set $3 to $4 permissions"
					printf "File '%s' mode set.\n" "$3"
				else
					LOGIT "Failed to set $3 to $4 permissions"
					ERR "$LINENO" "Unable to set the mode of '$3' file."
				fi
			fi
		fi
	fi
}

APT_INSTALL(){
	if [ -f "$OSFILE" -a -r "$OSFILE" ]; then
		LOGIT "Checking distribution base"
		while IFS="=" read -a X; do
			if [ "${X[0]//\"}" == "ID_LIKE" ]; then
				if ! [[ "${X[1]//\"}" =~ (debian|ubuntu) ]]; then
					LOGIT "Unsupported '${X[1]//\"}' base detected"
					ERR "$LINENO" "Unsupported distribution base."
					return 1
				fi
	
				break
			fi
		done < "$OSFILE"
	else
		LOGIT "Failed to find or read $OSFILE"
		ERR "$LINENO" "Cannot identify your LSB/Distro type."
		return 1
	fi

	if ! [ -x /usr/bin/apt-get ]; then
		LOGIT "Failed to find dependency $OSFILE"
		ERR "$LINENO" "Dependency '/usr/bin/apt-get' not found."
		return 1
	fi

	read -e -p "Enter 'APT' to install associated packages via APT: "
	if ! [[ "$REPLY" == "APT" ]]; then
		LOGIT "Quit at APT_INSTALL() prompt"
		printf "No DEB packages installed -- quitting.\n"
		exit 1
	else
		LOGIT "Telling APT to install $@"
		if ! /usr/bin/apt-get --quiet --show-progress -o Dpkg::Progress=true\
			-o Dpkg::Progress-Fancy=true install $@; then
			LOGIT "APT failed to install $@"
			return 1
		fi
	fi
}

AVAIL=(
	"apt-undo-install - Undo the last package(s) install executed with apt-get."
	"autoscrot - Tool to take full screenshots at user-specified intervals using scrot."
	"backmeup - A simple tool to quickly and easily back up your HOME."
	"bashconfig - My own bash settings and shell plugins for use by anybody."
	"bdl - Easily and quickly download a batch of files using wget."
	"binwatch - Output list of executables found in your PATH"
	"bios-info - Simple tool to show basic BIOS keys and their values."
	"bl - Much simpler, quicker version of blkid."
	"capnum - Small tool to notify of NumLock and CapsLock status changes."
	"catmedia - Concatenate media files originally separated in parts."
	"clean-locales - Remove some unnecessary non-English localizations."
	"compconf - The terminalforlife configuration file for compton."
	"cpufreq - Lightweight Bourne Shell utility to output your CPU frequencies."
	"dlfallwalls - Download a collection of Autumn/Fall wallpapers."
	"dlfcmags - Download issues of the Full Circle magazine PDFs."
	"dlspwalls - Download a collection of steampunk wallpapers."
	"dl-tuxradar-podcasts - Small shell program to download the TuxRadar podcasts."
	"dunstconfig - The terminalforlife configuration file for dunst."
	"dwwdl - Download all of the available DistroWatch Weekly podcasts."
	"forex - Easily convert various currency rates straight from the terminal."
	"getip - View your internal and/or external IP address."
	"getline - Pure Bourne Again Shell way to handle a plain text file."
	"get-uuid - Grab and copy your file system's UUID with this simple, easy-to-use GUI."
	"ghipc - Check the validity of IP addresses of GitHub servers."
	"github-ssh-setup - Simple shell program to create an SSH key pair for GitHub."
	"homewatch - Output files in HOME which have been modified today."
	"i3config - My own i3-wm settings and shell plugins for use by anybody."
	"jotd - Display a Joke of the Day on your terminal."
	"kernelchk - Small tool to check for a change in kernel version. Ideal for scripts."
	"lsbins - Simple shell program to list and describe the PATH executables."
	"lspkg - Quickly and portable-y show, describe, and search installed packages."
	"mansaver - Save man pages for each applicable command in PATH."
	"medlog - Need help taking and logging when you've had your medication?"
	"mfw - Notifier for page-one threads on the Newbie Questions Linux Mint forum."
	"mif - Shell program to filter films by year and whether seen or not."
	"mkpass - Pure Bourne Again Shell approach to complex password generation."
	"mplay - Simple script to allow me to quickly load mocp how I like."
	"nosp - A workaround for the issue in XFCE wherein Smart Placement refuses to go away."
	"notify-upgrade - Simple upgrade notification utility for Debian- and Ubuntu-based systems."
	"nxbt - A fork and improvement of the XBT program written by Joe Collins."
	"pagewatch - Watch a webpage for signs of change by checkings its md5sum."
	"redshifter - Effective and simple tool to manually adjust the gamma via Redshift."
	"reviewer - Terminal viewer for Linux Mint's user submitted software reviews."
	"ripmydvd - Shell program using ffmpeg and mplayer to rip your DVD."
	"roks - This small program will clear out your system of old kernel versions."
	"seewttr - Super-simple wrapper-like script to get your weather."
	"simplify-ubuntu - Small project to lighten standard Ubuntu 16.04.3 LTS installations."
	"simwea - Display various weather statistics on a terminal."
	"snotes - Search your programming notes on-the-fly with this simple tool."
	"tflvim - The terminalforlife theme and .vimrc configuration file for VIM."
	"tozero - Simple program to display a countdown for a target date."
	"ubuntu-syschk - Performs various non-root system health checks on Ubuntu and similar."
	"wcdl - Crawl WallpapersCraft for desktop backgrounds. Includes wcdl tools."
)

if [ "$AVAIL_SHOW" == "true" ]; then
	printf "%s\n" "${AVAIL[@]}"
	exit 0
fi

if [ "$SELF" == "true" ]; then
	LOGIT "FILE installit insit /usr/bin/insit 755 0 0"
	FILE installit insit /usr/bin/insit 755 0 0
	LOGIT "FILE installit completion /usr/share/bash-completion/completions/insit 644 0 0"
	FILE installit completion /usr/share/bash-completion/completions/insit 644 0 0
	exit 0 # Had to do this, since UPDATE is true here; saves possible mistake.
elif [ "$CUSTOM" == "true" ]; then
	LOGIT "Processing custom FILE '$@'"
	FILE $@
	exit 0
fi

while [ "$1" ]; do
	case "$1" in
		snotes)
			LOGIT "FILE miscellaneous snotes /usr/bin/snotes 755 0 0"
			FILE miscellaneous snotes /usr/bin/snotes 755 0 0 ;;
		dunstconfig)
			if [ -f $HOME/.config/dunst/dunstrc ]; then
				LOGIT "Displaying dunstconfig WARNING"
				while read -r; do
					printf "%s\n" "$REPLY"
				done <<-EOF
					WARNING: This will install and replace the following:

					  $HOME/.config/dunst/dunstrc

				EOF

				LOGIT "Prompting user to continue or not"
				read -e -p "Enter 'Yes!' if you're sure you wish to continue: "
				[[ "$REPLY" == "Yes!" ]] || { printf "No action taken -- skipping.\n"; shift; continue; }
			fi

			if ! [ -d $HOME/.config/dunst ]; then
				LOGIT "Creating $HOME/.config/dunst"
				/bin/mkdir $HOME/.config/dunst
			fi

			LOGIT "FILE miscellaneous dunstrc $HOME/.config/dunst/dunstrc 600 $SUDO_UID $SUDO_GID"
			FILE miscellaneous dunstrc $HOME/.config/dunst/dunstrc 600 $SUDO_UID $SUDO_GID

			[ -x /usr/bin/dunst ] || APT_INSTALL dunst ;;
		tflvim)
			if [ -f $HOME/.vimrc -o -f $HOME/.vim/colors/tfl.vim ]; then
				LOGIT "Displaying tflvim WARNING"
				while read -r; do
					printf "%s\n" "$REPLY"
				done <<-EOF
					WARNING: This will install and replace the following:

					  $HOME/.vimrc
					  $HOME/.config/colors/tfl.vim

				EOF

				LOGIT "Prompting user to continue or not"
				read -e -p "Enter 'Yes!' if you're sure you wish to continue: "
				[[ "$REPLY" == "Yes!" ]] || { printf "No action taken -- skipping.\n"; shift; continue; }
			fi

			if ! [ -d $HOME/.vim/colors ]; then
				LOGIT "Creating $HOME/.vim/colors directory"
				/bin/mkdir $HOME/.vim/colors
			fi

			LOGIT "FILE miscellaneous tfl.vim $HOME/.vim/colors/tfl.vim 600 $SUDO_UID $SUDO_GID"
			FILE miscellaneous tfl.vim $HOME/.vim/colors/tfl.vim 600 $SUDO_UID $SUDO_GID
			LOGIT "FILE miscellaneous .vimrc $HOME/.vimrc 600 $SUDO_UID $SUDO_GID"
			FILE miscellaneous .vimrc $HOME/.vimrc 600 $SUDO_UID $SUDO_GID

			[ -x /usr/bin/vim ] || APT_INSTALL vim ;;
		compconf)
			if [ -f $HOME/.config/compton.conf ]; then
				LOGIT "Displaying compconf WARNING"
				while read -r; do
					printf "%s\n" "$REPLY"
				done <<-EOF
					WARNING: This will install and replace the following:

					  $HOME/.config/compton.conf

				EOF

				LOGIT "Prompting user to continue or not"
				read -e -p "Enter 'Yes!' if you're sure you wish to continue: "
				[[ "$REPLY" == "Yes!" ]] || { printf "No action taken -- skipping.\n"; shift; continue; }
			fi

			if ! [ -d $HOME/.config ]; then
				LOGIT "Creating $HOME/.config directory"
				/bin/mkdir $HOME/.config
			fi

			LOGIT "FILE miscellaneous compton.conf $HOME/.config/compton.conf 600 $SUDO_UID $SUDO_GID"
			FILE miscellaneous compton.conf $HOME/.config/compton.conf 600 $SUDO_UID $SUDO_GID

			[ -x /usr/bin/compton ] || APT_INSTALL compton ;;
		jotd)
			LOGIT "FILE miscellaneous jotd /usr/bin/jotd 755 0 0"
			FILE miscellaneous jotd /usr/bin/jotd 755 0 0 ;;
		bios-info)
			LOGIT "FILE miscellaneous bios-info /usr/bin/bios-info 755 0 0"
			FILE miscellaneous bios-info /usr/bin/bios-info 755 0 0 ;;
		ghipc)
			LOGIT "FILE miscellaneous ghipc /usr/bin/ghipc 755 0 0"
			FILE miscellaneous ghipc /usr/bin/ghipc 755 0 0 ;;
		capnum)
			LOGIT "FILE miscellaneous capnum /usr/bin/capnum 755 0 0"
			FILE miscellaneous capnum /usr/bin/capnum 755 0 0 ;;
		mfw)
			LOGIT "FILE miscellaneous mfw /usr/bin/mfw 755 0 0"
			FILE miscellaneous mfw /usr/bin/mfw 755 0 0 ;;
		reviewer)
			LOGIT "FILE reviewer reviewer /usr/bin/reviewer 755 0 0"
			FILE reviewer reviewer /usr/bin/reviewer 755 0 0
			LOGIT "FILE reviewer completion /usr/share/bash-completion/completions/reviewer 644 0 0"
			FILE reviewer completion /usr/share/bash-completion/completions/reviewer 644 0 0 ;;
		ubuntu-syschk)
			LOGIT "FILE ubuntu-syschk ubuntu-syschk /usr/bin/ubuntu-syschk 755 0 0"
			FILE ubuntu-syschk ubuntu-syschk /usr/bin/ubuntu-syschk 755 0 0
			LOGIT "FILE ubuntu-syschk completion /usr/share/bash-completion/completions/ubuntu-syschk 644 0 0"
			FILE ubuntu-syschk completion /usr/share/bash-completion/completions/ubuntu-syschk 644 0 0 ;;
		simplify-ubuntu)
			LOGIT "FILE simplify-ubuntu simplify-ubuntu /usr/bin/simplify-ubuntu 755 0 0"
			FILE simplify-ubuntu simplify-ubuntu /usr/bin/simplify-ubuntu 755 0 0
			LOGIT "FILE simplify-ubuntu completion /usr/share/bash-completion/completions/simplify-ubuntu 644 0 0"
			FILE simplify-ubuntu completion /usr/share/bash-completion/completions/simplify-ubuntu 644 0 0
			LOGIT "FILE miscellaneous clean-locales /usr/bin/clean-locales 755 0 0"
			FILE miscellaneous clean-locales /usr/bin/clean-locales 755 0 0
			LOGIT "FILE lspkg lspkg /usr/bin/lspkg 755 0 0"
			FILE lspkg lspkg /usr/bin/lspkg 755 0 0
			LOGIT "FILE lspkg completion /usr/share/bash-completion/completions/lspkg 644 0 0"
			FILE lspkg completion /usr/share/bash-completion/completions/lspkg 644 0 0 ;;
		forex)
			LOGIT "FILE miscellaneous forex /usr/bin/forex 755 0 0"
			FILE miscellaneous forex /usr/bin/forex 755 0 0 ;;
		autoscrot)
			LOGIT "FILE autoscrot autoscrot /usr/bin/autoscrot 755 0 0"
			FILE autoscrot autoscrot /usr/bin/autoscrot 755 0 0 ;;
		apt-undo-install)
			LOGIT "FILE apt-undo-install apt-undo-install /usr/bin/apt-undo-install 755 0 0"
			FILE apt-undo-install apt-undo-install /usr/bin/apt-undo-install 755 0 0
			LOGIT "FILE apt-undo-install completion /usr/share/bash-completion/completions/apt-undo-install 644 0 0"
			FILE apt-undo-install completion /usr/share/bash-completion/completions/apt-undo-install 644 0 0 ;;
		binwatch)
			LOGIT "FILE binwatch binwatch /usr/bin/binwatch 755 0 0"
			FILE binwatch binwatch /usr/bin/binwatch 755 0 0 ;;
		bl)
			LOGIT "FILE bl bl /usr/bin/bl 755 0 0"
			FILE bl bl /usr/bin/bl 755 0 0 ;;
		nxbt)
			LOGIT "FILE nxbt nxbt /usr/bin/nxbt 755 0 0"
			FILE nxbt nxbt /usr/bin/nxbt 755 0 0
			LOGIT "FILE nxbt completion /usr/share/bash-completion/completions/nxbt 644 0 0"
			FILE nxbt completion /usr/share/bash-completion/completions/nxbt 644 0 0 ;;
		catmedia)
			LOGIT "FILE catmedia catmedia /usr/bin/catmedia 755 0 0"
			FILE catmedia catmedia /usr/bin/catmedia 755 0 0 ;;
		cpufreq)
			LOGIT "FILE cpufreq cpufreq /usr/bin/cpufreq 755 0 0"
			FILE cpufreq cpufreq /usr/bin/cpufreq 755 0 0 ;;
		dwwdl)
			LOGIT "FILE dwwdl dwwdl /usr/bin/dwwdl 755 0 0"
			FILE dwwdl dwwdl /usr/bin/dwwdl 755 0 0 ;;
		notify-upgrade)
			LOGIT "FILE notify-upgrade notify-upgrade /usr/bin/notify-upgrade 755 0 0"
			FILE notify-upgrade notify-upgrade /usr/bin/notify-upgrade 755 0 0
			LOGIT "FILE miscellaneous Cron_Tasks/APT_Update_Cron /etc/cron.hourly/APT_Update_Cron 755 0 0"
			FILE miscellaneous Cron_Tasks/APT_Update_Cron /etc/cron.hourly/APT_Update_Cron 755 0 0 ;;
		roks)
			LOGIT "FILE roks roks /usr/bin/roks 755 0 0"
			FILE roks roks /usr/bin/roks 755 0 0
			LOGIT "FILE roks completion /usr/share/bash-completion/completions/roks 644 0 0"
			FILE roks completion /usr/share/bash-completion/completions/roks 644 0 0 ;;
		bdl)
			LOGIT "FILE bdl bdl /usr/bin/bdl 755 0 0"
			FILE bdl bdl /usr/bin/bdl 755 0 0
			LOGIT "FILE bdl completion /usr/share/bash-completion/completions/bdl 644 0 0"
			FILE bdl completion /usr/share/bash-completion/completions/bdl 644 0 0 ;;
		bashconfig)
			LOGIT "Displaying bashconfig WARNING"
			while read -r; do
				printf "%s\n" "$REPLY"
			done <<-EOF
				WARNING: This will install and replace the following:

				  $HOME/.profile
				  $HOME/.bash_aliases
				  $HOME/.bash_functions
				  $HOME/.bashrc
				  $HOME/ShellPlugins/Bell_Alarm
				  $HOME/ShellPlugins/Cleaner_RK_Scan
				  $HOME/ShellPlugins/Clear_CD_LS
				  $HOME/ShellPlugins/CPU_Intensive_Proc
				  $HOME/ShellPlugins/Create_VM
				  $HOME/ShellPlugins/Get_Bad_Hosts
				  $HOME/ShellPlugins/Git_Status_All
				  $HOME/ShellPlugins/List_Signals
				  $HOME/ShellPlugins/Load_File_Links2
				  $HOME/ShellPlugins/Loop_This
				  $HOME/ShellPlugins/LSPKG_Set
				  $HOME/ShellPlugins/NIR_Difference
				  $HOME/ShellPlugins/Play_Download_MPSYT
				  $HOME/ShellPlugins/Shell_Alias_Correc
				  $HOME/ShellPlugins/Times_Table

			EOF

			LOGIT "Prompting user to continue or not"
			read -e -p "Enter 'Yes!' if you're sure you wish to continue: "
			[[ "$REPLY" == "Yes!" ]] || { printf "No action taken -- skipping.\n"; shift; continue; }

			LOGIT "FILE bashconfig .profile $HOME/.profile 644 "$SUDO_UID" "$SUDO_GID""
			FILE bashconfig .profile $HOME/.profile 644 "$SUDO_UID" "$SUDO_GID"
			LOGIT "FILE bashconfig .bash_aliases $HOME/.bash_aliases 644 "$SUDO_UID" "$SUDO_GID""
			FILE bashconfig .bash_aliases $HOME/.bash_aliases 644 "$SUDO_UID" "$SUDO_GID"
			LOGIT "FILE bashconfig .bash_functions $HOME/.bash_functions 644 "$SUDO_UID" "$SUDO_GID""
			FILE bashconfig .bash_functions $HOME/.bash_functions 644 "$SUDO_UID" "$SUDO_GID"
			LOGIT "FILE bashconfig .bashrc $HOME/.bashrc 644 "$SUDO_UID" "$SUDO_GID""
			FILE bashconfig .bashrc $HOME/.bashrc 644 "$SUDO_UID" "$SUDO_GID"

			if ! [ -d "$HOME/ShellPlugins" ]; then
				LOGIT "Creating $HOME/ShellPlugins directory"
				/bin/mkdir "$HOME/ShellPlugins"
			fi

			LOGIT "Setting $HOME/ShellPlugins to $SUDO_UID UID and $SUDO_GID GID"
			/bin/chown "$SUDO_UID":"$SUDO_GID" "$HOME/ShellPlugins"

			LOGIT "FILE bashconfig ShellPlugins/Bell_Alarm $HOME/ShellPlugins/Bell_Alarm 644 $SUDO_UID "$SUDO_GID""
			FILE bashconfig ShellPlugins/Bell_Alarm $HOME/ShellPlugins/Bell_Alarm 644 $SUDO_UID "$SUDO_GID"
			LOGIT "FILE bashconfig ShellPlugins/Cleaner_RK_Scan $HOME/ShellPlugins/Cleaner_RK_Scan 644 $SUDO_UID "$SUDO_GID""
			FILE bashconfig ShellPlugins/Cleaner_RK_Scan $HOME/ShellPlugins/Cleaner_RK_Scan 644 $SUDO_UID "$SUDO_GID"
			LOGIT "FILE bashconfig ShellPlugins/Clear_CD_LS $HOME/ShellPlugins/Clear_CD_LS 644 $SUDO_UID "$SUDO_GID""
			FILE bashconfig ShellPlugins/Clear_CD_LS $HOME/ShellPlugins/Clear_CD_LS 644 $SUDO_UID "$SUDO_GID"
			LOGIT "FILE bashconfig ShellPlugins/CPU_Intensive_Procs $HOME/ShellPlugins/CPU_Intensive_Procs 644 $SUDO_UID "$SUDO_GID""
			FILE bashconfig ShellPlugins/CPU_Intensive_Procs $HOME/ShellPlugins/CPU_Intensive_Procs 644 $SUDO_UID "$SUDO_GID"
			LOGIT "FILE bashconfig ShellPlugins/Create_VM $HOME/ShellPlugins/Create_VM 644 $SUDO_UID "$SUDO_GID""
			FILE bashconfig ShellPlugins/Create_VM $HOME/ShellPlugins/Create_VM 644 $SUDO_UID "$SUDO_GID"
			LOGIT "FILE bashconfig ShellPlugins/Get_Bad_Hosts $HOME/ShellPlugins/Get_Bad_Hosts 644 $SUDO_UID "$SUDO_GID""
			FILE bashconfig ShellPlugins/Get_Bad_Hosts $HOME/ShellPlugins/Get_Bad_Hosts 644 $SUDO_UID "$SUDO_GID"
			LOGIT "FILE bashconfig ShellPlugins/Git_Status_All $HOME/ShellPlugins/Git_Status_All 644 $SUDO_UID "$SUDO_GID""
			FILE bashconfig ShellPlugins/Git_Status_All $HOME/ShellPlugins/Git_Status_All 644 $SUDO_UID "$SUDO_GID"
			LOGIT "FILE bashconfig ShellPlugins/List_Signals $HOME/ShellPlugins/List_Signals 644 $SUDO_UID "$SUDO_GID""
			FILE bashconfig ShellPlugins/List_Signals $HOME/ShellPlugins/List_Signals 644 $SUDO_UID "$SUDO_GID"
			LOGIT "FILE bashconfig ShellPlugins/Load_File_Links2 $HOME/ShellPlugins/Load_File_Links2 644 $SUDO_UID "$SUDO_GID""
			FILE bashconfig ShellPlugins/Load_File_Links2 $HOME/ShellPlugins/Load_File_Links2 644 $SUDO_UID "$SUDO_GID"
			LOGIT "FILE bashconfig ShellPlugins/Loop_This $HOME/ShellPlugins/Loop_This 644 $SUDO_UID "$SUDO_GID""
			FILE bashconfig ShellPlugins/Loop_This $HOME/ShellPlugins/Loop_This 644 $SUDO_UID "$SUDO_GID"
			LOGIT "FILE bashconfig ShellPlugins/LSPKG_Set $HOME/ShellPlugins/LSPKG_Set 644 $SUDO_UID "$SUDO_GID""
			FILE bashconfig ShellPlugins/LSPKG_Set $HOME/ShellPlugins/LSPKG_Set 644 $SUDO_UID "$SUDO_GID"
			LOGIT "FILE bashconfig ShellPlugins/NIR_Difference $HOME/ShellPlugins/NIR_Difference 644 $SUDO_UID "$SUDO_GID""
			FILE bashconfig ShellPlugins/NIR_Difference $HOME/ShellPlugins/NIR_Difference 644 $SUDO_UID "$SUDO_GID"
			LOGIT "FILE bashconfig ShellPlugins/Play_Download_MPSYT $HOME/ShellPlugins/Play_Download_MPSYT 644 $SUDO_UID "$SUDO_GID""
			FILE bashconfig ShellPlugins/Play_Download_MPSYT $HOME/ShellPlugins/Play_Download_MPSYT 644 $SUDO_UID "$SUDO_GID"
			LOGIT "FILE bashconfig ShellPlugins/Shell_Alias_Correcting $HOME/ShellPlugins/Shell_Alias_Correcting 644 $SUDO_UID "$SUDO_GID""
			FILE bashconfig ShellPlugins/Shell_Alias_Correcting $HOME/ShellPlugins/Shell_Alias_Correcting 644 $SUDO_UID "$SUDO_GID"
			LOGIT "FILE bashconfig ShellPlugins/Times_Table $HOME/ShellPlugins/Times_Table 644 $SUDO_UID "$SUDO_GID""
			FILE bashconfig ShellPlugins/Times_Table $HOME/ShellPlugins/Times_Table 644 $SUDO_UID "$SUDO_GID"

			APT_INSTALL fonts-symbola ;;
		i3config)
			LOGIT "Displaying i3config WARNING"
			while read -r; do
				printf "%s\n" "$REPLY"
			done <<-EOF
				WARNING: This will install and replace the following:

				  $HOME/.config/i3/config
				  $HOME/.i3babove
				  $HOME/.i3bbelow
				  $HOME/.libi3bview
				  $HOME/.i3a/feh_slides
				  $HOME/.i3a/hush_the_mic
				  $HOME/.i3a/initialize
				  $HOME/.i3a/key_autorepeat
				  $HOME/.i3a/scrot_sel_take
				  $HOME/.i3a/scrot_take
				  $HOME/.i3a/scrot_win_take
				  $HOME/.i3a/sink_lower
				  $HOME/.i3a/sink_mute
				  $HOME/.i3a/sink_raise
				  $HOME/.i3a/source_lower
				  $HOME/.i3a/source_mute
				  $HOME/.i3a/source_raise
				  $HOME/.i3a/term_font_size
				  $HOME/.i3a/term_font_size_py
				  $HOME/.i3a/terminal
				  $HOME/.i3a/track_notify
				  $HOME/.i3a/use_dmenu

			EOF

			LOGIT "Prompting user to continue or not"
			read -e -p "Enter 'Yes!' if you're sure you wish to continue: "
			[[ "$REPLY" == "Yes!" ]] || { printf "No action taken -- skipping.\n"; shift; continue; }

			LOGIT "FILE i3config config $HOME/.config/i3/config 644 "$SUDO_UID" "$SUDO_GID""
			FILE i3config config $HOME/.config/i3/config 644 "$SUDO_UID" "$SUDO_GID"
			LOGIT "FILE i3config .libi3bview $HOME/.libi3bview 644 "$SUDO_UID" "$SUDO_GID""
			FILE i3config .libi3bview $HOME/.libi3bview 644 "$SUDO_UID" "$SUDO_GID"
			LOGIT "FILE i3config .i3babove $HOME/.i3babove 644 "$SUDO_UID" "$SUDO_GID""
			FILE i3config .i3babove $HOME/.i3babove 644 "$SUDO_UID" "$SUDO_GID"
			LOGIT "FILE i3config .i3bbelow $HOME/.i3bbelow 644 "$SUDO_UID" "$SUDO_GID""
			FILE i3config .i3bbelow $HOME/.i3bbelow 644 "$SUDO_UID" "$SUDO_GID"

			if ! [ -d "$HOME/.i3a" ]; then
				LOGIT "Creating $HOME/.i3a directory"
				/bin/mkdir "$HOME/.i3a"
			fi

			LOGIT "Setting $HOME/.i3a to $SUDO_UID UID and $SUDO_GID GID"

			LOGIT "FILE i3config .i3a/feh_slides $HOME/.i3a/feh_slides 644 "$SUDO_UID" "$SUDO_GID""
			FILE i3config .i3a/feh_slides $HOME/.i3a/feh_slides 644 "$SUDO_UID" "$SUDO_GID"
			LOGIT "FILE i3config .i3a/hush_the_mic $HOME/.i3a/hush_the_mic 644 "$SUDO_UID" "$SUDO_GID""
			FILE i3config .i3a/hush_the_mic $HOME/.i3a/hush_the_mic 644 "$SUDO_UID" "$SUDO_GID"
			LOGIT "FILE i3config .i3a/initialize $HOME/.i3a/initialize 644 "$SUDO_UID" "$SUDO_GID""
			FILE i3config .i3a/initialize $HOME/.i3a/initialize 644 "$SUDO_UID" "$SUDO_GID"
			LOGIT "FILE i3config .i3a/key_autorepeat $HOME/.i3a/key_autorepeat 644 "$SUDO_UID" "$SUDO_GID""
			FILE i3config .i3a/key_autorepeat $HOME/.i3a/key_autorepeat 644 "$SUDO_UID" "$SUDO_GID"
			LOGIT "FILE i3config .i3a/scrot_sel_take $HOME/.i3a/scrot_sel_take 644 "$SUDO_UID" "$SUDO_GID""
			FILE i3config .i3a/scrot_sel_take $HOME/.i3a/scrot_sel_take 644 "$SUDO_UID" "$SUDO_GID"
			LOGIT "FILE i3config .i3a/scrot_take $HOME/.i3a/scrot_take 644 "$SUDO_UID" "$SUDO_GID""
			FILE i3config .i3a/scrot_take $HOME/.i3a/scrot_take 644 "$SUDO_UID" "$SUDO_GID"
			LOGIT "FILE i3config .i3a/scrot_win_take $HOME/.i3a/scrot_win_take 644 "$SUDO_UID" "$SUDO_GID""
			FILE i3config .i3a/scrot_win_take $HOME/.i3a/scrot_win_take 644 "$SUDO_UID" "$SUDO_GID"
			LOGIT "FILE i3config .i3a/sink_lower $HOME/.i3a/sink_lower 644 "$SUDO_UID" "$SUDO_GID""
			FILE i3config .i3a/sink_lower $HOME/.i3a/sink_lower 644 "$SUDO_UID" "$SUDO_GID"
			LOGIT "FILE i3config .i3a/sink_mute $HOME/.i3a/sink_mute 644 "$SUDO_UID" "$SUDO_GID""
			FILE i3config .i3a/sink_mute $HOME/.i3a/sink_mute 644 "$SUDO_UID" "$SUDO_GID"
			LOGIT "FILE i3config .i3a/sink_raise $HOME/.i3a/sink_raise 644 "$SUDO_UID" "$SUDO_GID""
			FILE i3config .i3a/sink_raise $HOME/.i3a/sink_raise 644 "$SUDO_UID" "$SUDO_GID"
			LOGIT "FILE i3config .i3a/source_lower $HOME/.i3a/source_lower 644 "$SUDO_UID" "$SUDO_GID""
			FILE i3config .i3a/source_lower $HOME/.i3a/source_lower 644 "$SUDO_UID" "$SUDO_GID"
			LOGIT "FILE i3config .i3a/source_mute $HOME/.i3a/source_mute 644 "$SUDO_UID" "$SUDO_GID""
			FILE i3config .i3a/source_mute $HOME/.i3a/source_mute 644 "$SUDO_UID" "$SUDO_GID"
			LOGIT "FILE i3config .i3a/source_raise $HOME/.i3a/source_raise 644 "$SUDO_UID" "$SUDO_GID""
			FILE i3config .i3a/source_raise $HOME/.i3a/source_raise 644 "$SUDO_UID" "$SUDO_GID"
			LOGIT "FILE i3config .i3a/term_font_size $HOME/.i3a/term_font_size 644 "$SUDO_UID" "$SUDO_GID""
			FILE i3config .i3a/term_font_size $HOME/.i3a/term_font_size 644 "$SUDO_UID" "$SUDO_GID"
			LOGIT "FILE i3config .i3a/term_font_size_py $HOME/.i3a/term_font_size_py 644 "$SUDO_UID" "$SUDO_GID""
			FILE i3config .i3a/term_font_size_py $HOME/.i3a/term_font_size_py 644 "$SUDO_UID" "$SUDO_GID"
			LOGIT "FILE i3config .i3a/terminal $HOME/.i3a/terminal 644 "$SUDO_UID" "$SUDO_GID""
			FILE i3config .i3a/terminal $HOME/.i3a/terminal 644 "$SUDO_UID" "$SUDO_GID"
			LOGIT "FILE i3config .i3a/track_notify $HOME/.i3a/track_notify 644 "$SUDO_UID" "$SUDO_GID""
			FILE i3config .i3a/track_notify $HOME/.i3a/track_notify 644 "$SUDO_UID" "$SUDO_GID"
			LOGIT "FILE i3config .i3a/use_dmenu $HOME/.i3a/use_dmenu 644 "$SUDO_UID" "$SUDO_GID""
			FILE i3config .i3a/use_dmenu $HOME/.i3a/use_dmenu 644 "$SUDO_UID" "$SUDO_GID"

			APT_INSTALL i3-wm i3blocks suckless-tools compton moc\
				terminology libnotify-bin dunst pulseaudio-utils ;;
		kernelchk)
			LOGIT "FILE kernelchk kernelchk /usr/bin/kernelchk 755 0 0"
			FILE kernelchk kernelchk /usr/bin/kernelchk 755 0 0
			LOGIT "FILE kernelchk completion /usr/share/bash-completion/completions/kernelchk 644 0 0"
			FILE kernelchk completion /usr/share/bash-completion/completions/kernelchk 644 0 0 ;;
		get-uuid)
			LOGIT "FILE get-uuid get-uuid /usr/bin/get-uuid 755 0 0"
			FILE get-uuid get-uuid /usr/bin/get-uuid 755 0 0
			LOGIT "FILE get-uuid get-uuid.desktop /usr/share/applications/get-uuid.desktop 644 0 0"
			FILE get-uuid get-uuid.desktop /usr/share/applications/get-uuid.desktop 644 0 0 ;;
		wcdl)
			LOGIT "FILE wcdl wcdl /usr/bin/wcdl 755 0 0"
			FILE wcdl wcdl /usr/bin/wcdl 755 0 0
			LOGIT "FILE wcdl wcdl-cacheparse /usr/bin/wcdl-cacheparse 755 0 0"
			FILE wcdl wcdl-cacheparse /usr/bin/wcdl-cacheparse 755 0 0
			LOGIT "FILE wcdl wcdl-crosschk /usr/bin/wcdl-crosschk 755 0 0"
			FILE wcdl wcdl-crosschk /usr/bin/wcdl-crosschk 755 0 0
			LOGIT "FILE wcdl completion /usr/share/bash-completion/completions/wcdl 644 0 0"
			FILE wcdl completion /usr/share/bash-completion/completions/wcdl 644 0 0 ;;
		getline)
			LOGIT "FILE getline getline /usr/bin/getline 755 0 0"
			FILE getline getline /usr/bin/getline 755 0 0 ;;
		mansaver)
			LOGIT "FILE mansaver mansaver /usr/bin/mansaver 755 0 0"
			FILE mansaver mansaver /usr/bin/mansaver 755 0 0 ;;
		lspkg)
			LOGIT "FILE lspkg lspkg /usr/bin/lspkg 755 0 0"
			FILE lspkg lspkg /usr/bin/lspkg 755 0 0
			LOGIT "FILE lspkg completion /usr/share/bash-completion/completions/lspkg 644 0 0"
			FILE lspkg completion /usr/share/bash-completion/completions/lspkg 644 0 0 ;;
		lsbins)
			LOGIT "FILE miscellaneous lsbins /usr/bin/lsbins 755 0 0"
			FILE miscellaneous lsbins /usr/bin/lsbins 755 0 0 ;;
		github-ssh-setup)
			LOGIT "FILE github-ssh-setup github-ssh-setup /usr/bin/github-ssh-setup 755 0 0"
			FILE github-ssh-setup github-ssh-setup /usr/bin/github-ssh-setup 755 0 0 ;;
		homewatch)
			LOGIT "FILE homewatch homewatch /usr/bin/homewatch 755 0 0"
			FILE homewatch homewatch /usr/bin/homewatch 755 0 0 ;;
		getip)
			LOGIT "FILE getip getip /usr/bin/getip 755 0 0"
			FILE getip getip /usr/bin/getip 755 0 0
			LOGIT "FILE getip completion /usr/share/bash-completion/completions/getip 644 0 0"
			FILE getip completion /usr/share/bash-completion/completions/getip 644 0 0 ;;
		ripmydvd)
			LOGIT "FILE ripmydvd ripmydvd /usr/bin/ripmydvd 755 0 0"
			FILE ripmydvd ripmydvd /usr/bin/ripmydvd 755 0 0 ;;
		simwea)
			LOGIT "FILE simwea simwea /usr/bin/simwea 755 0 0"
			FILE simwea simwea /usr/bin/simwea 755 0 0
			LOGIT "FILE simwea completion /usr/share/bash-completion/completions/simwea 644 0 0"
			FILE simwea completion /usr/share/bash-completion/completions/simwea 644 0 0 ;;
		medlog)
			LOGIT "FILE miscellaneous medlog /usr/bin/medlog 755 0 0"
			FILE miscellaneous medlog /usr/bin/medlog 755 0 0 ;;
		mif)
			LOGIT "FILE miscellaneous mif /usr/bin/mif 755 0 0"
			FILE miscellaneous mif /usr/bin/mif 755 0 0
			LOGIT "FILE miscellaneous Completions/mif /usr/share/bash-completion/completions/mif 644 0 0"
			FILE miscellaneous Completions/mif /usr/share/bash-completion/completions/mif 644 0 0 ;;
		seewttr)
			LOGIT "FILE miscellaneous seewttr /usr/bin/seewttr 755 0 0"
			FILE miscellaneous seewttr /usr/bin/seewttr 755 0 0 ;;
		backmeup)
			LOGIT "FILE miscellaneous backmeup /usr/bin/backmeup 755 0 0"
			FILE miscellaneous backmeup /usr/bin/backmeup 755 0 0 ;;
		clean-locales)
			LOGIT "FILE miscellaneous clean-locales /usr/bin/clean-locales 755 0 0"
			FILE miscellaneous clean-locales /usr/bin/clean-locales 755 0 0 ;;
		mkpass)
			LOGIT "FILE miscellaneous mkpass /usr/bin/mkpass 755 0 0"
			FILE miscellaneous mkpass /usr/bin/mkpass 755 0 0
			LOGIT "FILE miscellaneous Completions/mkpass /usr/share/bash-completion/completions/mkpass 644 0 0"
			FILE miscellaneous Completions/mkpass /usr/share/bash-completion/completions/mkpass 644 0 0 ;;
		mplay)
			LOGIT "FILE miscellaneous mplay /usr/bin/mplay 755 0 0"
			FILE miscellaneous mplay /usr/bin/mplay 755 0 0 ;;
		pagewatch)
			LOGIT "FILE miscellaneous pagewatch /usr/bin/pagewatch 755 0 0"
			FILE miscellaneous pagewatch /usr/bin/pagewatch 755 0 0 ;;
		redshifter)
			LOGIT "FILE miscellaneous redshifter /usr/bin/redshifter 755 0 0"
			FILE miscellaneous redshifter /usr/bin/redshifter 755 0 0 ;;
		tozero)
			LOGIT "FILE miscellaneous tozero /usr/bin/tozero 755 0 0"
			FILE miscellaneous tozero /usr/bin/tozero 755 0 0 ;;
		nosp)
			LOGIT "FILE miscellaneous nosp /usr/bin/nosp 755 0 0"
			FILE miscellaneous nosp /usr/bin/nosp 755 0 0 ;;
		dlspwalls)
			LOGIT "FILE miscellaneous dlspwalls /usr/bin/dlspwalls 755 0 0"
			FILE miscellaneous dlspwalls /usr/bin/dlspwalls 755 0 0 ;;
		dlfcmags)
			LOGIT "FILE miscellaneous dlfcmags /usr/bin/dlfcmags 755 0 0"
			FILE miscellaneous dlfcmags /usr/bin/dlfcmags 755 0 0 ;;
		dlfallwalls)
			LOGIT "FILE miscellaneous dlfallwalls /usr/bin/dlfallwalls 755 0 0"
			FILE miscellaneous dlfallwalls /usr/bin/dlfallwalls 755 0 0 ;;
		dl-tuxradar-podcasts)
			LOGIT "FILE miscellaneous dl-tuxradar-podcasts /usr/bin/dl-tuxradar-podcasts 755 0 0"
			FILE miscellaneous dl-tuxradar-podcasts /usr/bin/dl-tuxradar-podcasts 755 0 0 ;;
		*)
			ERR "$LINENO" "Unavailable WHAT at: $1" ;;
	esac

	shift
done

# vim: noexpandtab colorcolumn=84 tabstop=8 noswapfile nobackup
